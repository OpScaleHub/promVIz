name: Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Add concurrency group to prevent parallel runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # Add cache version for better control
  CACHE_VERSION: v1

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      release_id: ${{ steps.semantic.outputs.release_id }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Add npm cache
      - name: Setup Node.js with cache
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      # Add error handling for git config
      - name: Git Identity
        run: |
          git config --global user.name 'github-actions[bot]' || exit 1
          git config --global user.email 'github-actions[bot]@users.noreply.github.com' || exit 1

      # Add retry mechanism for semantic release
      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          branch: main
          extra_plugins: |
            @semantic-release/git
            @semantic-release/changelog
            @semantic-release/github
        continue-on-error: true

      - name: Check Semantic Release
        if: steps.semantic.outcome == 'failure'
        run: |
          echo "Semantic release failed. Retrying once..."
          sleep 5
          npx semantic-release

  build:
    needs: release
    runs-on: ubuntu-latest
    # Add timeout to prevent hanging builds
    timeout-minutes: 30
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      build_success: ${{ steps.build-status.outputs.success }}
      image_tags: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.build-and-push.outputs.digest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}},value=${{ needs.release.outputs.new_release_version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.release.outputs.new_release_version }}
            type=semver,pattern={{major}},value=${{ needs.release.outputs.new_release_version }}
            type=raw,value=rc,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' && needs.release.outputs.new_release_published == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set build status
        id: build-status
        if: success()
        run: echo "success=true" >> $GITHUB_OUTPUT

  validate-release:
    needs: [release, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.new_release_published == 'true'
    steps:
      - name: Fetch Release ID
        id: fetch-release-id
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_ID=$(gh api /repos/${{ github.repository }}/releases -q '.[0].id')
          echo "RELEASE_ID=${RELEASE_ID}" >> $GITHUB_ENV

      - name: Publish or rollback release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_ID: ${{ env.RELEASE_ID }}
        run: |
          if [ -z "${{ env.RELEASE_ID }}" ]; then
            echo "Error: RELEASE_ID is not set."
            exit 1
          fi
          if [[ "${{ needs.build.outputs.build_success }}" == "true" ]]; then
            echo "Publishing the release"
            gh api --method PATCH /repos/${{ github.repository }}/releases/${{ env.RELEASE_ID }} -f draft=false || { echo "Failed to publish release"; exit 1; }
          else
            echo "Deleting the draft release and tag"
            gh api --method DELETE /repos/${{ github.repository }}/releases/${{ env.RELEASE_ID }} || { echo "Failed to delete release"; exit 1; }
            git push --delete origin v${{ needs.release.outputs.new_release_version }}
          fi

      - name: Sign the published Docker image
        if: needs.build.outputs.build_success == 'true'
        env:
          TAGS: ${{ needs.build.outputs.image_tags }}
          DIGEST: ${{ needs.build.outputs.image_digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

  promote-to-rc:
    needs: [validate-release, build]
    runs-on: ubuntu-latest
    # Add timeout
    timeout-minutes: 15
    if: |
      needs.build.outputs.build_success == 'true' &&
      needs.release.outputs.new_release_published == 'true' &&
      github.ref == 'refs/heads/main'
    steps:
      - name: Login to Registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Promote to RC
        run: |
          # Pull the new version
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.release.outputs.new_release_version }}
          # Tag as RC
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.release.outputs.new_release_version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:rc
          # Push RC tag
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:rc

      # Add health check after promotion
      - name: Verify RC Promotion
        run: |
          # Wait for image to be available
          for i in {1..5}; do
            if docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:rc; then
              echo "RC promotion verified successfully"
              exit 0
            fi
            echo "Waiting for RC image to be available... (attempt $i/5)"
            sleep 10
          done
          echo "RC promotion verification failed"
          exit 1

  promote-to-stable:
    needs: [validate-release, build]
    runs-on: ubuntu-latest
    # Add timeout
    timeout-minutes: 15
    permissions:
      contents: write
      packages: write
    if: |
      needs.build.outputs.build_success == 'true' &&
      needs.release.outputs.new_release_published == 'true' &&
      github.ref == 'refs/heads/main'
    steps:
      - name: Login to Registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Promote to Stable
        run: |
          # Pull the release version
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.release.outputs.new_release_version }}
          # Tag as stable
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.release.outputs.new_release_version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable
          # Push stable tag
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable

      # Add rollback capability
      - name: Backup Current Stable
        run: |
          if docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable; then
            docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable-backup
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable-backup
          fi

      - name: Update Release Notes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_ID: ${{ needs.release.outputs.release_id }}
        run: |
          gh api \
            --method PATCH \
            /repos/${{ github.repository }}/releases/${{ env.RELEASE_ID }} \
            -f body="This version has been automatically promoted to production (stable)"
